{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","chain","uniq","forEach","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"yRAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,wCCgBAC,EAAa,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BJ,EAAS,CACPK,KAAM,cACNC,QAASF,EAASG,OALU,2CAAN,uDASbC,EAAY,SAAAC,GAAE,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEACNC,EAAgBC,IAAhB,iBAA8BM,IADxB,OACvBL,EADuB,OAE7BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAFpB,2CAAJ,uDCxBrBG,E,iLAOO,IACEC,EAAQC,KAAKC,MAAbF,KACP,OAAIA,EAGG,yBAAKG,UAAU,UAAUH,EAAKI,MAF1B,S,GAVMC,IAAMC,WAsBhBC,eANS,SAACC,EAAOC,GAC5B,MAAO,CAACT,KAAMQ,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,EAASG,aAKjDL,CAAyBR,GCnBlCc,E,4LAEEZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAAAC,GACxB,OACI,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC5B,uBAAGK,UAAU,mCACb,yBAAKA,UAAW,WACZ,yBAAKA,UAAU,eACX,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEb,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BASzC,OAAM,yBAAKT,UAAU,0BAA0BF,KAAKoB,kB,GAxBrChB,IAAMC,WAgCdC,eAJS,SAACC,GACrB,MAAO,CAACO,MAAOP,EAAMO,SAGe,CAACD,mBFpCP,yDAAM,WAAOzB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAChCD,EAASD,KADuB,OAOtCmC,IAAEC,MAAMF,IAAWP,OACjBC,IAAI,UACJS,OACAC,SAAQ,SAAA5B,GAAE,OAAIT,EAASQ,EAAUC,OACjC6B,QAXoC,2CAAN,0DEoCnBpB,CAA+CM,GC5B/Ce,EARH,WACR,OACI,yBAAKzB,UAAU,gBACX,kBAAC,EAAD,Q,QCFG0B,cAAgB,CAC3Bd,MCLW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAOA,EAAOpC,MACV,IAAK,cACD,OAAOoC,EAAOnC,QAClB,QACI,OAAOa,IDCfE,MENW,WAA0B,IAAzBF,EAAwB,uDAAhB,GAAIsB,EAAY,uCACpC,OAAOA,EAAOpC,MACV,IAAK,aACD,MAAM,GAAN,mBAAWc,GAAX,CAAkBsB,EAAOnC,UAC7B,QACI,OAAOa,MCIbuB,EAAQC,YAAYC,EAAUC,YAAgBC,MACpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,Y","file":"static/js/main.3c24a8cd.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'http://jsonplaceholder.typicode.com'\n})"," import _ from \"lodash\";\nimport jsonPlaceholder from \"../apis/jsonPlaceholder\";\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts()); // manual dispatch - this will be picked by redux-thunk and get invoked by passing dispatch as firt argument, do all work and update the reducer\n  // await makes the case fetchPosts should be completed since only then it makes sense to move ahead\n\n  //const userIds = _.uniq(_.map(getState().posts, 'userId'));\n  //userIds.forEach( id => dispatch(fetchUser(id)));\n\n  _.chain(getState().posts)\n   .map('userId')\n   .uniq()\n   .forEach(id => dispatch(fetchUser(id)))\n   .value()\n};\n\n\n\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get(\"/posts\");\n\n  dispatch({\n    type: \"FETCH_POSTS\",\n    payload: response.data\n  });\n};\n\nexport const fetchUser = id => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({ type: \"FETCH_USER\", payload: response.data });\n};\n\n// using memoize from lodash to limit repetitive calls for same user id\n// this approach however assumes user ids would never change and would fail in case of a change\n// export const fetchUser = (id) => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({type: 'FETCH_USER', payload: response.data});\n// })\n","import React from 'react';\nimport { connect } from 'react-redux';\n//import { fetchUser } from '../actions';\n\nclass UserHeader extends React.Component{\n    \n    // componentDidMount(){\n    //      this.props.fetchUser(this.props.userId);\n    // }\n\n\n    render(){\n        const {user} = this.props;\n        if(!user){\n            return null;\n        }\n        return <div className=\"header\">{user.name}</div>\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {user: state.users.find(user => user.id === ownProps.userId)}\n}\n\n\n//export default connect(mapStateToProps, { fetchUser })(UserHeader);\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from '../components/UserHeader';\n\n\nclass PostList extends React.Component{\n    componentDidMount(){\n        this.props.fetchPostsAndUsers();\n    }\n\n    renderList(){\n        return this.props.posts.map(post => {\n            return(\n                <div className=\"item\" key={post.id}>\n                    <i className=\"large middle aligned icon user\" />\n                    <div className =\"content\">\n                        <div className=\"description\">\n                            <h2>{post.title}</h2>\n                            <p>{post.body}</p>\n                        </div>\n                        <UserHeader userId={post.userId}/>\n                    </div>\n                </div>\n            );\n        })\n    }\n\n    render(){\n        \n        return<div className=\"ui relaxed divied list\">{this.renderList()}</div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {posts: state.posts};\n}\n\nexport default connect(mapStateToProps, {fetchPostsAndUsers})(PostList);\n// first param of connect will always be mapStateToProps;\n// but here we pass null to show we don't have any state to pass to this component","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n    return (\n        <div className=\"ui container\">\n            <PostList />\n        </div>\n    );\n}\n\nexport default App;","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n    posts: postsReducer,\n    users: usersReducer\n});","export default (state = [], action) => {\n    switch(action.type){\n        case 'FETCH_POSTS':\n            return action.payload;\n        default:\n            return state\n    }\n}","export default (state = [], action ) => {\n    switch(action.type){\n        case 'FETCH_USER':\n            return [...state, action.payload];\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n    );"],"sourceRoot":""}